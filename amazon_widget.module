<?php
/**
 * @file
 * Client side widget for amazon.
 */

/**
 * Implements hook_menu().
 */
function amazon_widget_menu() {
  $items = array();
  $items['admin/config/services/amazon/widget'] = array(
    'title' => 'Widget',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('amazon_widget_settings_form'),
    'file' => 'amazon_widget.admin.inc',
    'access callback' => 'user_access',
    'access arguments' => array('administer amazon'),
    'type' => MENU_LOCAL_TASK
  );

  return $items;
}

/**
 * Implements hook_page_alter().
 */
function amazon_widget_page_alter(&$page) {
  if (path_is_admin(current_path())) {
    return;
  }

  $js_supported = FALSE;
  if (isset($_COOKIE['has_js']) && $_COOKIE['has_js']) {
    $js_supported = TRUE;
  }

  $url = check_url(_amazon_widget_variable_get('amazon_widget_geoip_url'));
  $data_type = check_plain(_amazon_widget_variable_get('amazon_widget_geoip_data_type'));
  $country_code_key = check_plain(_amazon_widget_variable_get('amazon_widget_geoip_country_code_key'));
  $default_locale = check_plain(_amazon_widget_variable_get('amazon_default_locale'));

  $amazon_data = amazon_data_cache();
  $locales = $amazon_data['locales'];

  // Hide all localized amazon items.
  $css_array = array();
  $classes = _amazon_widget_variable_get('amazon_widget_css_classes');
  $css_hide = _amazon_widget_variable_get('amazon_widget_css_hide');
  $css_show = _amazon_widget_variable_get('amazon_widget_css_show');
  foreach ($locales as $locale => $item) {
    if (variable_get('amazon_locale_' . $locale . '_associate_id', '')) {
      // When the browser doesn't support js, do not hide the widget for the default locale.
      if (!$js_supported && $locale == $default_locale) {
        continue;
      }
      // Hides all elements configured in the css selectors settings.
      foreach ($classes as $key => $selector) {
        $css_array[$locale . $key] = $selector . '.locale-' . strtolower($locale);
      }
    }
  }
  $options = array(
    'type' => 'inline',
    'weight' => 100,
    'preprocess' => FALSE,
  );
  drupal_add_css(implode(', ', $css_array) . ' ' . $css_hide, $options);

  // Add widget settings.
  drupal_add_js(array(
    'amazon_widget' => array(
      'geoip_url' => trim($url, '/') . '/',
      'data_type' => $data_type,
      'country_code_key' => $country_code_key,
      'default_locale' => $default_locale,
      'classes' => $classes,
      'css_hide' => $css_hide,
      'css_show' => $css_show,
    ),
  ), 'setting');

  // Add widget controller.
  $path = drupal_get_path('module', 'amazon_widget') . '/amazon_widget.js';
  $options = array(
    'weight' => 1000,
    'every_page' => TRUE,
    'preprocess' => FALSE,
    'requires_jquery' => TRUE,
  );
  drupal_add_js($path, $options);
}

/**
 * Wrapper to return variables or default values.
 *
 * @param $name
 */
function _amazon_widget_variable_get($name) {

  switch ($name) {
    case 'amazon_widget_geoip_url':
      $default = 'http://freegeoip.net/json';
      break;

    case 'amazon_widget_geoip_data_type':
      $default = 'json';
      break;

    case 'amazon_widget_geoip_country_code_key':
      $default = 'country_code';
      break;

    case 'amazon_widget_geoip_country_code_key':
      $default = 'country_code';
      break;

    case 'amazon_widget_css_classes':
      $default = array(
        '.amazon-item',
        '.field-type-asin',
      );
      break;

    case 'amazon_widget_css_show':
      $default = '{display: block;}';
      break;

    case 'amazon_widget_css_hide':
      $default = '{display: none;}';
      break;

    case 'amazon_default_locale':
      $default = 'US';
      break;
  }

  return variable_get($name, $default);
}
